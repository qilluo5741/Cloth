<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
     xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
  <!-- 开启注解模式 -->
  <mvc:annotation-driven/>
  <!-- 指定需要扫面的包 -->
  <context:component-scan base-package="com.cloth"/>
  <!-- 配置容器 -->
  <!-- 配置数据源 -->
  <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
  <!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driverClass}" />
		<property name="jdbcUrl" value="${jdbcUrl}" />
		<property name="user" value="${user}" />
		<property name="password" value="${password}" />
		<property name="minPoolSize" value="${minPoolSize}" /> <!--连接池中保留的最小连接数。 -->
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${maxPoolSize}" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${initialPoolSize}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${acquireIncrement}" />
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="${maxStatements}" />
		<!--连接池用完时客户调用getConnection()后等待获取连接的时间，单位：毫秒。超时后会抛出 -->
		<!--SQLEXCEPTION，如果设置0，则无限等待。Default:0 -->
		<property name="checkoutTimeout" value="${checkoutTimeout}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${acquireRetryAttempts}" />
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}" />
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}" />
	</bean>
  <!-- spring mvc中配置一个全局的拦截器栈（链） -->
		<mvc:interceptors>
			<!-- 配置一个完整的拦截器,按照配置顺序执行 -->
			<mvc:interceptor>
				<!-- 拦截要拦截的请求路径:/*:只拦截项目根目录的第一级请求；/**：拦截项目根目录及其子目录的请求 -->
				<mvc:mapping path="/**"/>
				<!-- 拦截器的实现类 -->
				<bean class="com.cloth.interceptor.UserLoginInterceptor"/>
			</mvc:interceptor>
		
		</mvc:interceptors>
  
  <!-- 配置sessionFactory -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/>
    	<!-- 将实体包中的所有类添加到注解容器中 -->
    	<property name="packagesToScan">
    		<list>
    			<value>com.cloth.entity</value>
    		</list>
    	</property>
    	<!-- 配置hibernate的其他属性 -->
    	<property name="hibernateProperties">
    		<props>
    			<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
    			<!-- <prop key="hibernate.show_sql">true</prop> -->
    			<prop key="hibernate.format_sql">true</prop>
    			<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
    		</props>
    	</property>
    </bean>
    <!-- 多媒体 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    <property name="maxUploadSize" value="10485760" />  
</bean>
  <!-- 事物配置 -->
  <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
  	<!-- 为事管理其注入sessionFactory -->
  	<property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <!-- 注解实现事物~ -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> 
</beans>